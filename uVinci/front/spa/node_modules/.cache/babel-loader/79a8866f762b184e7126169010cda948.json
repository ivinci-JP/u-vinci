{"ast":null,"code":"import messages from \"../constants/messages\";\nimport statusCodes from \"../constants/statusCodes\";\nconst dataNotFound = {\n  result: [],\n  message: messages.NO_CONTENT,\n  status: statusCodes.NO_CONTENT\n};\nconst badRequest = {\n  result: {},\n  message: messages.BAD_REQUEST,\n  status: statusCodes.BAD_REQUEST\n};\n/* \nconst requestTimeout = {\n  result: {},\n  message: messages.REQUEST_TIMEOUT,\n  status: statusCodes.REQUEST_TIMEOUT,\n}; */\n\nconst internalServerError = {\n  result: {},\n  message: messages.INTERNAL_SERVER_ERROR,\n  status: statusCodes.INTERNAL_SERVER_ERROR\n};\nconst fakeInternalServerError = {\n  id: \"iVinciSince2012\",\n  lat: 35.692973,\n  lng: 139.761738\n};\n\nconst getStub = (functionName, id) => {\n  if (id) {\n    if (id === fakeInternalServerError.id) {\n      return internalServerError;\n    }\n    /* \n        if (id.slice(-1) === \"7\") {\n          return requestTimeout;\n        }\n     */\n\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      const detailedInformation = require(`./${functionName}/${id}.json`);\n\n      return {\n        result: detailedInformation,\n        messages: messages.OK,\n        status: statusCodes.OK\n      };\n    } catch {\n      return dataNotFound;\n    }\n  }\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    const listForTheFunction = require(`./${functionName}.json`); // , fakeInternalServerError\n\n\n    return {\n      result: [...listForTheFunction],\n      messages: messages.OK,\n      status: statusCodes.OK\n    };\n  } catch {\n    return dataNotFound;\n  }\n};\n\nconst postStub = ({\n  functionName,\n  id,\n  options,\n  user,\n  like\n}) => {\n  if (options[0] === \"like\") {\n    try {\n      const filePath = `./${functionName}/${id}.json`; // eslint-disable-next-line import/no-dynamic-require, global-require\n\n      const detailedInformation = require(`${filePath}`);\n\n      const newComentoes = like ? [...detailedInformation.comentoes, user] : detailedInformation.comentoes;\n      const result = { ...detailedInformation,\n        comentoes: newComentoes\n      };\n      return {\n        result,\n        messages: messages.OK,\n        status: statusCodes.OK\n      };\n    } catch {\n      return internalServerError;\n    }\n  }\n\n  return badRequest;\n};\n\nconst getParams = urlString => {\n  const {\n    pathname\n  } = new URL(urlString);\n  return pathname.split(\"/\").slice(1);\n};\n\nconst get = urlString => {\n  const [functionName, id] = getParams(urlString);\n  const stubResponse = getStub(functionName, id);\n  return stubResponse;\n};\n\nconst post = (urlString, option) => {\n  try {\n    const {\n      header: {\n        token\n      },\n      body: {\n        user,\n        like = true\n      }\n    } = option;\n\n    if (token == null || user == null) {\n      throw new Error(\"bad request!\");\n    }\n\n    const [functionName, id, ...options] = getParams(urlString);\n    const stubResponse = postStub({\n      functionName,\n      id,\n      options,\n      user,\n      like\n    });\n    return stubResponse;\n  } catch {\n    return badRequest;\n  }\n};\n\nconst uVinciAPIStub = {\n  get,\n  post\n};\nexport default uVinciAPIStub;","map":{"version":3,"sources":["/workspaces/javascript-node/task1/u-vinci/u-vinci_draft/uVinci/front/spa/src/stub/uVinciAPIStub.js"],"names":["messages","statusCodes","dataNotFound","result","message","NO_CONTENT","status","badRequest","BAD_REQUEST","internalServerError","INTERNAL_SERVER_ERROR","fakeInternalServerError","id","lat","lng","getStub","functionName","detailedInformation","require","OK","listForTheFunction","postStub","options","user","like","filePath","newComentoes","comentoes","getParams","urlString","pathname","URL","split","slice","get","stubResponse","post","option","header","token","body","Error","uVinciAPIStub"],"mappings":"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","sourcesContent":["import messages from \"../constants/messages\";\nimport statusCodes from \"../constants/statusCodes\";\n\nconst dataNotFound = {\n  result: [],\n  message: messages.NO_CONTENT,\n  status: statusCodes.NO_CONTENT,\n};\n\nconst badRequest = {\n  result: {},\n  message: messages.BAD_REQUEST,\n  status: statusCodes.BAD_REQUEST,\n};\n/* \nconst requestTimeout = {\n  result: {},\n  message: messages.REQUEST_TIMEOUT,\n  status: statusCodes.REQUEST_TIMEOUT,\n}; */\n\nconst internalServerError = {\n  result: {},\n  message: messages.INTERNAL_SERVER_ERROR,\n  status: statusCodes.INTERNAL_SERVER_ERROR,\n};\n\nconst fakeInternalServerError = {\n  id: \"iVinciSince2012\",\n  lat: 35.692973,\n  lng: 139.761738,\n};\n\nconst getStub = (functionName, id) => {\n  if (id) {\n    if (id === fakeInternalServerError.id) {\n      return internalServerError;\n    }\n/* \n    if (id.slice(-1) === \"7\") {\n      return requestTimeout;\n    }\n */\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      const detailedInformation = require(`./${functionName}/${id}.json`);\n\n      return {\n        result: detailedInformation,\n        messages: messages.OK,\n        status: statusCodes.OK,\n      };\n    } catch {\n      return dataNotFound;\n    }\n  }\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    const listForTheFunction = require(`./${functionName}.json`);\n    // , fakeInternalServerError\n\n    return {\n      result: [...listForTheFunction],\n      messages: messages.OK,\n      status: statusCodes.OK,\n    };\n  } catch {\n    return dataNotFound;\n  }\n};\n\nconst postStub = ({ functionName, id, options, user, like }) => {\n  if (options[0] === \"like\") {\n    try {\n      const filePath = `./${functionName}/${id}.json`;\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      const detailedInformation = require(`${filePath}`);\n\n      const newComentoes = like\n        ? [...detailedInformation.comentoes, user]\n        : detailedInformation.comentoes;\n      const result = {\n        ...detailedInformation,\n        comentoes: newComentoes,\n      };\n\n      return {\n        result,\n        messages: messages.OK,\n        status: statusCodes.OK,\n      };\n    } catch {\n      return internalServerError;\n    }\n  }\n\n  return badRequest;\n};\n\nconst getParams = (urlString) => {\n  const { pathname } = new URL(urlString);\n\n  return pathname.split(\"/\").slice(1);\n};\n\nconst get = (urlString) => {\n  const [functionName, id] = getParams(urlString);\n  const stubResponse = getStub(functionName, id);\n\n  return stubResponse;\n};\n\nconst post = (urlString, option) => {\n  try {\n    const {\n      header: { token },\n      body: { user, like = true },\n    } = option;\n\n    if (token == null || user == null) {\n      throw new Error(\"bad request!\");\n    }\n\n    const [functionName, id, ...options] = getParams(urlString);\n    const stubResponse = postStub({ functionName, id, options, user, like });\n\n    return stubResponse;\n  } catch {\n    return badRequest;\n  }\n};\n\nconst uVinciAPIStub = {\n  get,\n  post,\n};\n\nexport default uVinciAPIStub;\n"]},"metadata":{},"sourceType":"module"}